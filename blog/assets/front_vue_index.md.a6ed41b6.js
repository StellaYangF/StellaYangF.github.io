import{_ as s,o as a,c as n,U as l}from"./chunks/framework.e95afc2d.js";const A=JSON.parse('{"title":"vue3 源码学习","description":"","frontmatter":{},"headers":[],"relativePath":"front/vue/index.md","filePath":"front/vue/index.md"}'),p={name:"front/vue/index.md"},e=l(`<h1 id="vue3-源码学习" tabindex="-1">vue3 源码学习 <a class="header-anchor" href="#vue3-源码学习" aria-label="Permalink to &quot;vue3 源码学习&quot;">​</a></h1><nav class="table-of-contents"><ul><li><a href="#设计思想">设计思想</a></li><li><a href="#保留-vue2-特色">保留 Vue2 特色</a><ul><li><a href="#声明式框架">声明式框架</a></li><li><a href="#采用vdom">采用VDOM</a></li><li><a href="#区分编译时和运行时">区分编译时和运行时</a></li></ul></li></ul></nav><h2 id="设计思想" tabindex="-1">设计思想 <a class="header-anchor" href="#设计思想" aria-label="Permalink to &quot;设计思想&quot;">​</a></h2><p>对比Vue2代码组织，Vue3在代码的分包上做了优化，后续整体架构章节会具体分析说明，总体如下：</p><ul><li><p>模块拆分</p><blockquote><p>Vue3.0更注重模块上的拆分，在2.0中无法单独使用部分模块。需要引入完整的 <code>Vuejs</code> (例如只想使用使用 <code>reactivity</code> 响应式部分，但是需要引入完整的 <code>Vuejs</code> )， Vue3中的模块之间耦合度低，模块可以独立使用。</p></blockquote></li><li><p>重写API</p><blockquote><p>Vue2中很多方法挂载到了实例中，导致没有使用也会被打包（还有很多组件也是一样）。通过构建工具 <code>Tree-shaking</code> 机制实现按需引入，减少用户打包后体积。</p></blockquote></li><li><p>扩展更方便</p><blockquote><p>Vue3允许自定义渲染器，扩展能力强。不会发生以前的事情，改写Vue源码改造渲染方式。暴露出 <code>createRenderer</code> 与平台无关的渲染器，可以根据平台灵活编写渲染方式。</p></blockquote></li></ul><h2 id="保留-vue2-特色" tabindex="-1">保留 Vue2 特色 <a class="header-anchor" href="#保留-vue2-特色" aria-label="Permalink to &quot;保留 Vue2 特色&quot;">​</a></h2><h3 id="声明式框架" tabindex="-1">声明式框架 <a class="header-anchor" href="#声明式框架" aria-label="Permalink to &quot;声明式框架&quot;">​</a></h3><ul><li>命令式：早在 jQuery 的时代编写的代码都是命令式的，命令式框架重要特点就是关注过程</li><li>声明式：框架更加关注结果。命令式的代码封装到了Vuejs中，过程靠vuejs来实现</li><li>声明式代码更加简单，不需要关注实现，按照要求填代码就可以</li></ul><blockquote><p><em>Declarative programming is a non-imperative style of programming in which programs describe their desired results without explicitly listing commands or steps that must be performed. Functional and logical programming languages are characterized by a declarative programming style.</em></p></blockquote><p><em><a href="https://www.educative.io/blog/declarative-vs-imperative-programming" target="_blank" rel="noreferrer">see https://www.educative.io/blog/declarative-vs-imperative-programming</a></em></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 命令式编程</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> list </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">a</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">b</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">c</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">]</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> html </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">&lt;ul&gt;</span><span style="color:#89DDFF;">\`</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;">(</span><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> list</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> i</span><span style="color:#89DDFF;">++</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 关注过程</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">html</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">&lt;li&gt;</span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">list[i]</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">&lt;/li&gt;</span><span style="color:#89DDFF;">\`</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">html</span><span style="color:#89DDFF;">+=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">&lt;/ul&gt;</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 声明式编程</span></span>
<span class="line"><span style="color:#A6ACCD;">list</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">reduce</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">memo</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">current</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> memo </span><span style="color:#89DDFF;">+=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">&lt;li&gt;</span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">current</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">&lt;/li&gt;</span><span style="color:#89DDFF;">\`</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">&lt;ul&gt;</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)html </span><span style="color:#89DDFF;">+=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">&lt;/ul</span><span style="color:#89DDFF;">&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="采用vdom" tabindex="-1">采用VDOM <a class="header-anchor" href="#采用vdom" aria-label="Permalink to &quot;采用VDOM&quot;">​</a></h3><p>jQuery 时代，回想刚开始做前端时，公司的旧业务代码就是通过传统方式更新页面，拼接一个完整的字符串 <code>innerHTML</code> 全部重新渲染，这样频繁修改，导致大量浏览器重排重绘，性能差。</p><p>而 Vue 框架包括 React 都是添加虚拟文档 virtual DOM，可以比较新旧虚拟节点，找到变化再进行更新。虚拟DOM就是一个对象，用来描述真实DOM的</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> vnode </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">__v_isVNode</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">__v_skip</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  type</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  props</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">key</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> props </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">normalizeKey</span><span style="color:#A6ACCD;">(props)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">ref</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> props </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">normalizeRef</span><span style="color:#A6ACCD;">(props)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  children</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">component</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">el</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null,</span></span>
<span class="line"><span style="color:#A6ACCD;">  patchFlag</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  dynamicProps</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">dynamicChildren</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">appContext</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><blockquote><p>创建VDOM对象，大致包含以上属性值，描述节点的相关信息。</p></blockquote><h3 id="区分编译时和运行时" tabindex="-1">区分编译时和运行时 <a class="header-anchor" href="#区分编译时和运行时" aria-label="Permalink to &quot;区分编译时和运行时&quot;">​</a></h3><ul><li>虚拟DOM，调用渲染方法将虚拟DOM渲染成真实DOM （缺点就是虚拟DOM编写麻烦）</li><li>专门写个编译时可以将模板 template 编译成虚拟DOM （在构建的时候进行编译性能更高，不需要再运行的时候进行编译，而且vue3在编译中做了很多优化）</li></ul>`,18),o=[e];function r(t,c,D,i,y,F){return a(),n("div",null,o)}const u=s(p,[["render",r]]);export{A as __pageData,u as default};
